{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let governanceAddress = Address(base58'3PLHVWCqA9DJPDbadUofTohnCULLauiDWhS')
let adminInvoke = base58'Czn4yoAuUZCVCLJDRfskn8URfkwpknwBTZDbs1wFrY7h'
let adminPubKey1 = base58'DXDY2itiEcYBtGkVLnkpHtDFyWQUkoLJz79uJ7ECbMrA'
let adminPubKey2 = base58'E6Wa1SGoktYcjHjsKrvjMiqJY3SWmGKcD8Q5L8kxSPS7'
let adminPubKey3 = base58'AZmWJtuy4GeVrMmJH4hfFBRApe1StvhJSk4jcbT6bArQ'

let keyPrefixPoolName = "pool_"

func isSelfInvoke(i: Invocation) = if i.caller == this then unit else throw("Only the Oracle itself can invoke this function")

func parsePoolAddress(address: String) = address.addressFromString().valueOrErrorMessage("Invalid pool address").toString()

func getPoolNameIfValid(poolName: String) = {
  let underscoreIndex = poolName.indexOf("_").valueOrElse(-1)
  let underscoreLastIndex = poolName.lastIndexOf("_").valueOrElse(-1)
  let hasSingleUnderscore = underscoreIndex == underscoreLastIndex && underscoreIndex > 0 && underscoreIndex != (poolName.size() + 1)

  if hasSingleUnderscore then
    poolName
  else
    throw("Pool name must consist of two asset names separated by an underscore character")
}

@Callable(i)
func addPool(poolAddress: String, poolName: String) = isSelfInvoke(i).valueOrElse({
  let key = keyPrefixPoolName + poolAddress.parsePoolAddress()
  let possiblyExistingEntry = this.getString(key)

  if possiblyExistingEntry.isDefined() then
    throw("Pool with address " + poolAddress + " is already defined with name \"" + possiblyExistingEntry.value() + "\"")
  else [
    StringEntry(key, poolName.getPoolNameIfValid())
  ]
})

@Callable(i)
func renamePool(poolAddress: String, newPoolName: String) = isSelfInvoke(i).valueOrElse({
  let key = keyPrefixPoolName + poolAddress.parsePoolAddress()
  let possiblyExistingEntry = this.getString(key)

  if possiblyExistingEntry.isDefined() then [
    StringEntry(key, newPoolName.getPoolNameIfValid())
  ] else
    throw("Pool with address " + poolAddress + " has not yet been added")
})

@Verifier(tx)
func verify() = match tx {
  case invoke: InvokeScriptTransaction => {
    let isExchangeCall = this.getString(keyPrefixPoolName + invoke.dApp.addressFromRecipient().toString()).isDefined() && invoke.function == "exchange"
    let isAirdropCall = invoke.dApp == governanceAddress && invoke.function == "airDrop"
    let isSelfCall = invoke.dApp == this && ["addPool", "renamePool"].containsElement(invoke.function)
    let signedByAdmin = sigVerify(tx.bodyBytes, tx.proofs[0], adminInvoke)

    (((isExchangeCall || isAirdropCall) && invoke.payments.size() == 1) || isSelfCall) && signedByAdmin
  }
  case _ => {
    let adminPubKey1Signed = if sigVerify(tx.bodyBytes, tx.proofs[0], adminPubKey1) then 1 else 0
    let adminPubKey2Signed = if sigVerify(tx.bodyBytes, tx.proofs[1], adminPubKey2) then 1 else 0
    let adminPubKey3Signed = if sigVerify(tx.bodyBytes, tx.proofs[2], adminPubKey3) then 1 else 0
    adminPubKey1Signed + adminPubKey2Signed + adminPubKey3Signed >= 2
  }
}
